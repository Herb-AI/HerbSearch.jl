{
    "avg_time": 142.25630132357279,
    "experiment": {
        "number": 4,
        "description": "Partial solution: reward > best_reward + 0.2.\nCycle length 8.\nSelect 5 programs with highest reward.\nUpdate based on last action; fit = min(best_reward / 100, 1); replace start symbol with [best_program; ACT].\nAllow taking multiple actions after best program.\nChange (TIMES, action) to (action, TIMES).\nLast direction higher probability, other directions lower uniform probability.",
        "grammar": [
            "4 : SEQ => ACT",
            "4 : ACT => [A]",
            "4 : ACT => [ACT; A]",
            "4 : A => (Dict(\"move\" => DIR, \"sprint\" => 1, \"jump\" => 1), TIMES)",
            "4 : DIR => 1",
            "4 : DIR => 2",
            "4 : DIR => 4",
            "4 : DIR => 8",
            "4 : DIR => 5",
            "4 : DIR => 9",
            "4 : DIR => 6",
            "4 : DIR => 10",
            "4 : TIMES => 5",
            "4 : TIMES => 10",
            "4 : TIMES => 25",
            "4 : TIMES => 50",
            "4 : TIMES => 75",
            "4 : TIMES => 100"
        ]
    },
    "tries": [
        {
            "number": 1,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10)]",
            "time": 141.27456712722778,
            "best_reward_over_time": "(0.8567020893096924, 0.7175369262695312)(1.8771560192108154, 0.8260650634765625)(2.782194137573242, 1.994171142578125)(3.1157209873199463, 3.5540847778320312)(3.6340279579162598, 8.325111389160156)(4.3983471393585205, 15.982097625732422)(5.3626320362091064, 21.263580322265625)(6.567078113555908, 29.337635040283203)(8.88692307472229, 54.10545539855957)(11.217331171035767, 61.9716911315918)(28.48118495941162, 67.80089712142944)(35.01075100898743, 68.3229546546936)(52.73389410972595, 69.22955894470215)(55.12579417228699, 69.81437969207764)(95.57528614997864, 69.89490556716919)(99.65302896499634, 70.7058653831482)(103.74976015090942, 72.20734119415283)(137.41696214675903, 72.97081422805786)(139.82620406150818, 73.29461407661438)",
            "programs_evaluated": 73
        },
        {
            "number": 2,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10)]",
            "time": 143.47102880477905,
            "best_reward_over_time": "(0.26850008964538574, 0.7175369262695312)(1.0568270683288574, 0.8260650634765625)(1.8074300289154053, 1.994171142578125)(2.0883140563964844, 3.5540847778320312)(2.544100046157837, 8.325111389160156)(3.23614501953125, 15.982097625732422)(4.136840105056763, 21.263580322265625)(5.360909938812256, 29.337635040283203)(7.724618911743164, 54.10545539855957)(10.034328937530518, 61.9716911315918)(26.511147022247314, 67.80089712142944)(32.608482122421265, 68.3229546546936)(51.76456093788147, 69.22955894470215)(54.16627812385559, 69.81437969207764)(95.93671703338623, 69.89490556716919)(100.63542413711548, 70.7058653831482)(105.48536014556885, 72.20734119415283)(140.78715896606445, 72.97081422805786)(143.47093605995178, 73.29461407661438)",
            "programs_evaluated": 73
        },
        {
            "number": 3,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10)]",
            "time": 142.02330803871155,
            "best_reward_over_time": "(0.2401750087738037, 0.7175369262695312)(0.9589438438415527, 0.8260650634765625)(1.6160259246826172, 1.994171142578125)(1.876572847366333, 3.5540847778320312)(2.2917640209198, 8.325111389160156)(2.927579879760742, 15.982097625732422)(3.790092945098877, 21.263580322265625)(4.92441987991333, 29.337635040283203)(7.162750005722046, 54.10545539855957)(9.404706954956055, 61.9716911315918)(25.548532009124756, 67.80089712142944)(31.80008101463318, 68.3229546546936)(51.00855302810669, 69.22955894470215)(53.35917282104492, 69.81437969207764)(94.9263219833374, 69.89490556716919)(99.6967248916626, 70.7058653831482)(104.43795204162598, 72.20734119415283)(139.44872784614563, 72.97081422805786)(142.0232379436493, 73.29461407661438)",
            "programs_evaluated": 73
        }
    ],
    "world": {
        "seed": 958129,
        "description": "Relatively flat. Some trees. Cave opening."
    }
}
