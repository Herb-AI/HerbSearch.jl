{
    "avg_time": 116.27458095550537,
    "experiment": {
        "number": 4,
        "description": "Partial solution: reward > best_reward + 0.2.\nCycle length 8.\nSelect 5 programs with highest reward.\nUpdate based on last action; fit = min(best_reward / 100, 1); replace start symbol with [best_program; ACTS].\nAllow taking multiple actions after best program.\nChange (TIMES, action) to (action, TIMES).\nLast direction has cost 1, other directions cost 10.",
        "grammar": [
            "4 : SEQ => ACT",
            "4 : ACT => [A]",
            "4 : ACT => [ACT; A]",
            "4 : A => (Dict(\"move\" => DIR, \"sprint\" => 1, \"jump\" => 1), TIMES)",
            "4 : DIR => 1",
            "4 : DIR => 2",
            "4 : DIR => 4",
            "4 : DIR => 8",
            "4 : DIR => 5",
            "4 : DIR => 9",
            "4 : DIR => 6",
            "4 : DIR => 10",
            "4 : TIMES => 5",
            "4 : TIMES => 10",
            "4 : TIMES => 25",
            "4 : TIMES => 50",
            "4 : TIMES => 75",
            "4 : TIMES => 100"
        ]
    },
    "tries": [
        {
            "number": 1,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 50), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 50), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 50), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 50), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 50)]",
            "time": 116.37584590911865,
            "best_reward_over_time": "(0.891852855682373, 0.7175369262695312)(1.8767399787902832, 0.8260650634765625)(2.8115170001983643, 1.7037277221679688)(3.120131015777588, 3.0084304809570312)(3.6095268726348877, 6.8863525390625)(4.210765838623047, 11.763252258300781)(5.06470799446106, 11.841354370117188)(14.077565908432007, 16.6622314453125)(16.04581904411316, 20.673267364501953)(20.45333695411682, 21.731121063232422)(21.93039298057556, 27.583168029785156)(31.489471912384033, 32.78700256347656)(33.4055118560791, 39.832454681396484)(35.454572916030884, 46.62737464904785)(39.949872970581055, 53.55318069458008)(49.11594104766846, 62.487104415893555)(51.971006870269775, 63.903154373168945)(69.50775384902954, 68.74267387390137)(114.93895983695984, 173.78803074359894)",
            "programs_evaluated": 72
        },
        {
            "number": 2,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 50), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 50), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 50), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 50), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 50)]",
            "time": 116.01986598968506,
            "best_reward_over_time": "(0.27396297454833984, 0.7175369262695312)(1.0761339664459229, 0.8260650634765625)(1.8163368701934814, 1.7037277221679688)(2.129058837890625, 3.0084304809570312)(2.596855878829956, 6.8863525390625)(3.139427900314331, 11.763252258300781)(3.952439785003662, 11.841354370117188)(13.11850380897522, 16.6622314453125)(15.052465915679932, 20.673267364501953)(19.416231870651245, 21.731121063232422)(20.883147954940796, 27.583168029785156)(30.24605679512024, 32.78700256347656)(32.45010995864868, 39.832454681396484)(34.65662980079651, 46.62737464904785)(39.41527986526489, 53.55318069458008)(48.845782995224, 62.487104415893555)(51.649255990982056, 63.903154373168945)(69.91616582870483, 68.74267387390137)(116.019770860672, 173.78803074359894)",
            "programs_evaluated": 72
        },
        {
            "number": 3,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 50), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 50), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 50), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 50), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 50)]",
            "time": 116.4280309677124,
            "best_reward_over_time": "(0.26828503608703613, 0.7175369262695312)(1.0267918109893799, 0.8260650634765625)(1.7629618644714355, 1.7037277221679688)(2.0672049522399902, 3.0084304809570312)(2.534402847290039, 6.8863525390625)(3.076859951019287, 11.763252258300781)(3.9118030071258545, 11.841354370117188)(12.873385906219482, 16.6622314453125)(14.560242891311646, 20.673267364501953)(18.714608907699585, 21.731121063232422)(20.11435890197754, 27.583168029785156)(29.75361204147339, 32.78700256347656)(31.805925846099854, 39.832454681396484)(33.90218782424927, 46.62737464904785)(38.52733397483826, 53.55318069458008)(48.072108030319214, 62.487104415893555)(50.941903829574585, 63.903154373168945)(69.03712582588196, 68.74267387390137)(116.42795896530151, 173.78803074359894)",
            "programs_evaluated": 72
        }
    ],
    "world": {
        "seed": 958129,
        "description": "Relatively flat. Some trees. Cave opening."
    }
}
