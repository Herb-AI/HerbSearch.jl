{
    "avg_time": 141.49228700002035,
    "experiment": {
        "number": 4,
        "description": "Partial solution: reward > best_reward.\nCycle length 8.\nSelect 5 programs with highest reward.\nUpdate based on last action; fit = min(best_reward / 100, 1); replace start symbol with [best_program; ACT].\nAllow taking multiple actions after best program.\nChange (TIMES, action) to (action, TIMES).\nLast direction higher probability, other directions lower uniform probability.",
        "grammar": [
            "4 : SEQ => ACT",
            "4 : ACT => [A]",
            "4 : ACT => [ACT; A]",
            "4 : A => (Dict(\"move\" => DIR, \"sprint\" => 1, \"jump\" => 1), TIMES)",
            "4 : DIR => 1",
            "4 : DIR => 2",
            "4 : DIR => 4",
            "4 : DIR => 8",
            "4 : DIR => 5",
            "4 : DIR => 9",
            "4 : DIR => 6",
            "4 : DIR => 10",
            "4 : TIMES => 5",
            "4 : TIMES => 10",
            "4 : TIMES => 25",
            "4 : TIMES => 50",
            "4 : TIMES => 75",
            "4 : TIMES => 100"
        ]
    },
    "tries": [
        {
            "number": 1,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10)]",
            "time": 142.46666502952576,
            "best_reward_over_time": "(0.8742001056671143, 0.7175369262695312)(1.865684986114502, 0.8260650634765625)(2.7551732063293457, 1.994171142578125)(3.076004981994629, 3.5540847778320312)(3.5824291706085205, 8.325111389160156)(4.3339011669158936, 15.982097625732422)(5.3005452156066895, 21.263580322265625)(6.5712480545043945, 29.337635040283203)(8.932131052017212, 54.10545539855957)(11.183089017868042, 61.9716911315918)(28.238785982131958, 67.80089712142944)(34.68841910362244, 68.3229546546936)(53.217050075531006, 69.22955894470215)(55.56588315963745, 69.81437969207764)(95.3797070980072, 69.89490556716919)(99.85766315460205, 70.7058653831482)(104.47462511062622, 72.20734119415283)(138.5466811656952, 72.97081422805786)(141.03211617469788, 174.18505895137787)",
            "programs_evaluated": 73
        },
        {
            "number": 2,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10)]",
            "time": 142.11024403572083,
            "best_reward_over_time": "(0.28733015060424805, 0.7175369262695312)(1.0825011730194092, 0.8260650634765625)(1.809602975845337, 1.994171142578125)(2.1158690452575684, 3.5540847778320312)(2.564795970916748, 8.325111389160156)(3.263256072998047, 15.982097625732422)(4.172974109649658, 21.263580322265625)(5.398912191390991, 29.337635040283203)(7.7992470264434814, 54.10545539855957)(10.126252174377441, 61.9716911315918)(27.00159502029419, 67.80089712142944)(33.328685998916626, 68.3229546546936)(52.17190718650818, 69.22955894470215)(54.56817007064819, 69.81437969207764)(94.64429903030396, 69.89490556716919)(99.29134702682495, 70.7058653831482)(104.16361403465271, 72.20734119415283)(139.50951313972473, 72.97081422805786)(142.11015915870667, 174.18505895137787)",
            "programs_evaluated": 73
        },
        {
            "number": 3,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10)]",
            "time": 139.89995193481445,
            "best_reward_over_time": "(0.25811219215393066, 0.7175369262695312)(1.0242550373077393, 0.8260650634765625)(1.7424731254577637, 1.994171142578125)(2.0245771408081055, 3.5540847778320312)(2.4622151851654053, 8.325111389160156)(3.1317760944366455, 15.982097625732422)(4.001037120819092, 21.263580322265625)(5.177475214004517, 29.337635040283203)(7.330596208572388, 54.10545539855957)(9.605496168136597, 61.9716911315918)(26.3225040435791, 67.80089712142944)(32.84540605545044, 68.3229546546936)(51.35437607765198, 69.22955894470215)(53.782713174819946, 69.81437969207764)(93.48942112922668, 69.89490556716919)(98.16254115104675, 70.7058653831482)(103.02455711364746, 72.20734119415283)(137.38249111175537, 72.97081422805786)(139.89987921714783, 174.18505895137787)",
            "programs_evaluated": 73
        }
    ],
    "world": {
        "seed": 958129,
        "description": "Relatively flat. Some trees. Cave opening."
    }
}
