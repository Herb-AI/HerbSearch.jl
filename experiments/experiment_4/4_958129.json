{
    "avg_time": 118.52708729108174,
    "experiment": {
        "number": 4,
        "description": "Partial solution: reward > best_reward + 0.2.\nCycle length 8.\nSelect 5 programs with highest reward.\nUpdate based on last action; fit = min(best_reward / 100, 1); replace start symbol with [best_program; ACTS].\nAllow taking multiple actions after best program.\nChange (TIMES, action) to (action, TIMES).\nLast direction has cost 1, other directions cost 10.",
        "grammar": [
            "4 : SEQ => ACT",
            "4 : ACT => [A]",
            "4 : ACT => [ACT; A]",
            "4 : A => (Dict(\"move\" => DIR, \"sprint\" => 1, \"jump\" => 1), TIMES)",
            "4 : DIR => 1",
            "4 : DIR => 2",
            "4 : DIR => 4",
            "4 : DIR => 8",
            "4 : DIR => 5",
            "4 : DIR => 9",
            "4 : DIR => 6",
            "4 : DIR => 10",
            "4 : TIMES => 5",
            "4 : TIMES => 10",
            "4 : TIMES => 25",
            "4 : TIMES => 50",
            "4 : TIMES => 75",
            "4 : TIMES => 100"
        ]
    },
    "tries": [
        {
            "number": 1,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 50), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 50), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 50), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 50), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 50)]",
            "time": 118.41516995429993,
            "best_reward_over_time": "(0.8817849159240723, 0.7175369262695312)(1.871016025543213, 0.8260650634765625)(2.711848020553589, 1.7037277221679688)(3.053292989730835, 3.0084304809570312)(3.591660976409912, 6.8863525390625)(4.191731929779053, 11.763252258300781)(5.020505905151367, 11.841354370117188)(14.180259943008423, 16.6622314453125)(16.132576942443848, 20.673267364501953)(20.44164800643921, 21.731121063232422)(21.89506196975708, 27.583168029785156)(31.41236400604248, 32.78700256347656)(33.51641392707825, 39.832454681396484)(35.38874101638794, 46.62737464904785)(39.687500953674316, 53.55318069458008)(49.2048020362854, 62.487104415893555)(51.95168900489807, 63.903154373168945)(70.59316086769104, 68.74267387390137)(117.00092196464539, 173.78803074359894)",
            "programs_evaluated": 72
        },
        {
            "number": 2,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 50), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 50), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 50), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 50), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 50)]",
            "time": 119.76713299751282,
            "best_reward_over_time": "(0.2961540222167969, 0.7175369262695312)(1.0925722122192383, 0.8260650634765625)(1.8496301174163818, 1.7037277221679688)(2.146311044692993, 3.0084304809570312)(2.606722116470337, 6.8863525390625)(3.1625561714172363, 11.763252258300781)(3.9883501529693604, 11.841354370117188)(13.197105169296265, 16.6622314453125)(15.156014204025269, 20.673267364501953)(19.559438228607178, 21.731121063232422)(21.02517604827881, 27.583168029785156)(30.737553119659424, 32.78700256347656)(32.86262011528015, 39.832454681396484)(35.07143306732178, 46.62737464904785)(39.80849599838257, 53.55318069458008)(49.62117910385132, 62.487104415893555)(52.43607711791992, 63.903154373168945)(71.46616315841675, 68.74267387390137)(119.7670681476593, 173.78803074359894)",
            "programs_evaluated": 72
        },
        {
            "number": 3,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 50), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 50), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 50), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 50), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 50)]",
            "time": 117.3989589214325,
            "best_reward_over_time": "(0.2598259449005127, 0.7175369262695312)(1.030806064605713, 0.8260650634765625)(1.7637829780578613, 1.7037277221679688)(2.0695888996124268, 3.0084304809570312)(2.5424530506134033, 6.8863525390625)(3.1219658851623535, 11.763252258300781)(3.9621639251708984, 11.841354370117188)(13.092797994613647, 16.6622314453125)(14.912800073623657, 20.673267364501953)(19.00556993484497, 21.731121063232422)(20.344393968582153, 27.583168029785156)(29.999265909194946, 32.78700256347656)(32.13415288925171, 39.832454681396484)(34.311599016189575, 46.62737464904785)(39.008338928222656, 53.55318069458008)(49.021509885787964, 62.487104415893555)(51.9802930355072, 63.903154373168945)(69.64667797088623, 68.74267387390137)(117.39888286590576, 173.78803074359894)",
            "programs_evaluated": 72
        }
    ],
    "world": {
        "seed": 958129,
        "description": "Relatively flat. Some trees. Cave opening."
    }
}
