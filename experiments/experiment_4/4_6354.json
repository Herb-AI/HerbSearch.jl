{
    "avg_time": 774.2041023572286,
    "experiment": {
        "number": 4,
        "description": "Partial solution: reward > best_reward + 0.2.\nCycle length 8.\nSelect 5 programs with highest reward.\nUpdate based on last action; fit = min(best_reward / 100, 1); replace start symbol with [best_program; ACTS].\nAllow taking multiple actions after best program.\nChange (TIMES, action) to (action, TIMES).\nLast direction has cost 1, other directions cost 10.",
        "grammar": [
            "4 : SEQ => ACT",
            "4 : ACT => [A]",
            "4 : ACT => [ACT; A]",
            "4 : A => (Dict(\"move\" => DIR, \"sprint\" => 1, \"jump\" => 1), TIMES)",
            "4 : DIR => 1",
            "4 : DIR => 2",
            "4 : DIR => 4",
            "4 : DIR => 8",
            "4 : DIR => 5",
            "4 : DIR => 9",
            "4 : DIR => 6",
            "4 : DIR => 10",
            "4 : TIMES => 5",
            "4 : TIMES => 10",
            "4 : TIMES => 25",
            "4 : TIMES => 50",
            "4 : TIMES => 75",
            "4 : TIMES => 100"
        ]
    },
    "tries": [
        {
            "number": 1,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x09), 50), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 10)]",
            "time": 744.6961741447449,
            "best_reward_over_time": "(0.6593649387359619, 0.7725448608398438)(1.7414190769195557, 0.7818145751953125)(6.09236216545105, 0.9250946044921875)(14.602972030639648, 1.865570068359375)(28.14133596420288, 1.8825607299804688)(32.817203998565674, 2.3942031860351562)(33.61797904968262, 2.9911346435546875)(34.419557094573975, 3.667694091796875)(35.39825201034546, 6.063995361328125)(36.56723403930664, 10.006187438964844)(37.831597089767456, 11.58803939819336)(53.232304096221924, 12.125690460205078)(61.00866198539734, 12.773773193359375)(62.32953500747681, 13.238597869873047)(63.80233907699585, 16.01421356201172)(65.55035614967346, 19.94655990600586)(67.45775198936462, 23.425987243652344)(69.64028906822205, 25.02151107788086)(74.93931412696838, 26.297813415527344)(87.26924014091492, 26.468032836914062)(92.79223608970642, 32.68299102783203)(96.161062002182, 34.04111099243164)(99.47135996818542, 45.58686637878418)(117.0778820514679, 47.82758903503418)(125.41367697715759, 49.41688346862793)(177.56573796272278, 58.99172019958496)(191.06322813034058, 63.44426727294922)(239.57393598556519, 63.557979583740234)(244.23994994163513, 63.780378341674805)(259.48986196517944, 65.57812023162842)(270.79828906059265, 69.48721981048584)(356.4971339702606, 70.81344509124756)(469.27687907218933, 71.3622419834137)(489.75181698799133, 71.65325474739075)(496.4152569770813, 72.26369833946228)(554.7609701156616, 72.36053395271301)(575.1905410289764, 72.92053043842316)(609.1653790473938, 73.34519553184509)(623.6549060344696, 73.3541910648346)(644.9914879798889, 73.37968873977661)(672.4226450920105, 74.04085940122604)(743.2636580467224, 173.7125574350357)",
            "programs_evaluated": 213
        },
        {
            "number": 2,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x09), 50), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 10)]",
            "time": 795.8040540218353,
            "best_reward_over_time": "(0.15325403213500977, 0.7725448608398438)(0.9639039039611816, 0.7818145751953125)(5.048029899597168, 0.9250946044921875)(13.563514947891235, 1.865570068359375)(27.74256992340088, 1.8825607299804688)(32.65125298500061, 2.3942031860351562)(33.46314311027527, 2.9911346435546875)(34.25419092178345, 3.667694091796875)(35.13701605796814, 6.063995361328125)(36.25138998031616, 10.006187438964844)(37.45016312599182, 11.58803939819336)(52.652787923812866, 12.125690460205078)(60.741255044937134, 12.773773193359375)(62.17317295074463, 13.238597869873047)(63.67778491973877, 16.01421356201172)(65.50069999694824, 19.94655990600586)(67.45119500160217, 23.425987243652344)(69.7370491027832, 25.02151107788086)(75.42181897163391, 26.297813415527344)(88.63607501983643, 26.468032836914062)(94.53311109542847, 32.68299102783203)(98.06456804275513, 34.04111099243164)(101.38695311546326, 45.58686637878418)(121.00973796844482, 47.82758903503418)(130.2952380180359, 49.41688346862793)(185.568421125412, 58.99172019958496)(199.81983494758606, 63.44426727294922)(250.44099497795105, 63.557979583740234)(255.66045594215393, 63.780378341674805)(272.35325503349304, 65.57812023162842)(284.92567801475525, 69.48721981048584)(375.7879979610443, 70.81344509124756)(498.13149189949036, 71.3622419834137)(519.8679869174957, 71.65325474739075)(527.3739910125732, 72.26369833946228)(590.2421400547028, 72.36053395271301)(612.9230570793152, 72.92053043842316)(650.5249650478363, 73.34519553184509)(666.1191899776459, 73.3541910648346)(687.6580150127411, 73.37968873977661)(717.1204559803009, 74.04085940122604)(795.8040010929108, 173.7125574350357)",
            "programs_evaluated": 213
        },
        {
            "number": 3,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x09), 50), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 10)]",
            "time": 782.1120789051056,
            "best_reward_over_time": "(0.15503978729248047, 0.7725448608398438)(0.9686470031738281, 0.7818145751953125)(5.089693784713745, 0.9250946044921875)(13.085953950881958, 1.865570068359375)(26.851403951644897, 1.8825607299804688)(31.746280908584595, 2.3942031860351562)(32.56916880607605, 2.9911346435546875)(33.39986300468445, 3.667694091796875)(34.334577798843384, 6.063995361328125)(35.518526792526245, 10.006187438964844)(36.82922887802124, 11.58803939819336)(50.97340679168701, 12.125690460205078)(58.86059379577637, 12.773773193359375)(60.242735862731934, 13.238597869873047)(61.67090582847595, 16.01421356201172)(63.337989807128906, 19.94655990600586)(65.2442569732666, 23.425987243652344)(67.50659084320068, 25.02151107788086)(72.95725083351135, 26.297813415527344)(85.93724298477173, 26.468032836914062)(91.13645577430725, 32.68299102783203)(94.56285190582275, 34.04111099243164)(97.85872983932495, 45.58686637878418)(116.9743218421936, 47.82758903503418)(126.78286099433899, 49.41688346862793)(182.93482089042664, 58.99172019958496)(197.2409999370575, 63.44426727294922)(248.5911989212036, 63.557979583740234)(253.66872000694275, 63.780378341674805)(270.72920989990234, 65.57812023162842)(283.1927947998047, 69.48721981048584)(373.4847369194031, 70.81344509124756)(491.90967988967896, 71.3622419834137)(513.0045168399811, 71.65325474739075)(520.2808167934418, 72.26369833946228)(580.75821185112, 72.36053395271301)(603.508663892746, 72.92053043842316)(640.5321879386902, 73.34519553184509)(656.4505279064178, 73.3541910648346)(677.8987958431244, 73.37968873977661)(707.5169389247894, 74.04085940122604)(782.112025976181, 173.7125574350357)",
            "programs_evaluated": 213
        }
    ],
    "world": {
        "seed": 6354,
        "description": "Many trees. Small hill."
    }
}
