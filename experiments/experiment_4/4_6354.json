{
    "avg_time": 760.5346706708273,
    "experiment": {
        "number": 4,
        "description": "Partial solution: reward > best_reward + 0.2.\nCycle length 8.\nSelect 5 programs with highest reward.\nUpdate based on last action; fit = min(best_reward / 100, 1); replace start symbol with [best_program; ACTS].\nAllow taking multiple actions after best program.\nChange (TIMES, action) to (action, TIMES).\nLast direction has cost 1, other directions cost 10.",
        "grammar": [
            "4 : SEQ => ACT",
            "4 : ACT => [A]",
            "4 : ACT => [ACT; A]",
            "4 : A => (Dict(\"move\" => DIR, \"sprint\" => 1, \"jump\" => 1), TIMES)",
            "4 : DIR => 1",
            "4 : DIR => 2",
            "4 : DIR => 4",
            "4 : DIR => 8",
            "4 : DIR => 5",
            "4 : DIR => 9",
            "4 : DIR => 6",
            "4 : DIR => 10",
            "4 : TIMES => 5",
            "4 : TIMES => 10",
            "4 : TIMES => 25",
            "4 : TIMES => 50",
            "4 : TIMES => 75",
            "4 : TIMES => 100"
        ]
    },
    "tries": [
        {
            "number": 1,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x09), 50), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 10)]",
            "time": 751.370766878128,
            "best_reward_over_time": "(0.667017936706543, 0.7725448608398438)(1.7797129154205322, 0.7818145751953125)(6.0987019538879395, 0.9250946044921875)(14.799714088439941, 1.865570068359375)(29.04330801963806, 1.8825607299804688)(33.84567189216614, 2.3942031860351562)(34.624809980392456, 2.9911346435546875)(35.442522048950195, 3.667694091796875)(36.43618392944336, 6.063995361328125)(37.582762002944946, 10.006187438964844)(38.83943700790405, 11.58803939819336)(53.695656061172485, 12.125690460205078)(61.27850008010864, 12.773773193359375)(62.5868821144104, 13.238597869873047)(64.05459094047546, 16.01421356201172)(65.75896692276001, 19.94655990600586)(67.68042302131653, 23.425987243652344)(69.90111494064331, 25.02151107788086)(75.41775107383728, 26.297813415527344)(87.93806910514832, 26.468032836914062)(93.40128207206726, 32.68299102783203)(96.89524006843567, 34.04111099243164)(100.4112401008606, 45.58686637878418)(118.50302791595459, 47.82758903503418)(127.3683168888092, 49.41688346862793)(178.84056997299194, 58.99172019958496)(192.02048206329346, 63.44426727294922)(241.51069593429565, 63.557979583740234)(246.42898797988892, 63.780378341674805)(262.44017004966736, 65.57812023162842)(274.24655199050903, 69.48721981048584)(360.39244389533997, 70.81344509124756)(473.5238780975342, 71.3622419834137)(493.5136959552765, 71.65325474739075)(500.47507309913635, 72.26369833946228)(558.8598260879517, 72.36053395271301)(579.8724200725555, 72.92053043842316)(615.8260679244995, 73.34519553184509)(630.7321219444275, 73.3541910648346)(652.1868960857391, 73.37968873977661)(680.0689990520477, 74.04085940122604)(749.9335770606995, 173.7125574350357)",
            "programs_evaluated": 213
        },
        {
            "number": 2,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x09), 50), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 10)]",
            "time": 768.6332719326019,
            "best_reward_over_time": "(0.1533069610595703, 0.7725448608398438)(1.0058410167694092, 0.7818145751953125)(4.744194030761719, 0.9250946044921875)(13.127694845199585, 1.865570068359375)(26.890511989593506, 1.8825607299804688)(31.626962900161743, 2.3942031860351562)(32.44257402420044, 2.9911346435546875)(33.263861894607544, 3.667694091796875)(34.268146991729736, 6.063995361328125)(35.463600873947144, 10.006187438964844)(36.791568994522095, 11.58803939819336)(52.57142186164856, 12.125690460205078)(60.35409188270569, 12.773773193359375)(61.53480005264282, 13.238597869873047)(62.871795892715454, 16.01421356201172)(64.4400360584259, 19.94655990600586)(66.2777509689331, 23.425987243652344)(68.58278107643127, 25.02151107788086)(74.23841285705566, 26.297813415527344)(87.21203398704529, 26.468032836914062)(92.86582398414612, 32.68299102783203)(96.24383497238159, 34.04111099243164)(99.36657786369324, 45.58686637878418)(118.9082419872284, 47.82758903503418)(127.51293587684631, 49.41688346862793)(182.9330358505249, 58.99172019958496)(197.06964707374573, 63.44426727294922)(247.5553719997406, 63.557979583740234)(252.41706895828247, 63.780378341674805)(269.06617188453674, 65.57812023162842)(281.42244696617126, 69.48721981048584)(369.2339768409729, 70.81344509124756)(487.9198708534241, 71.3622419834137)(508.8023040294647, 71.65325474739075)(515.954920053482, 72.26369833946228)(574.3262889385223, 72.36053395271301)(595.4841530323029, 72.92053043842316)(629.498193025589, 73.34519553184509)(643.6217720508575, 73.3541910648346)(664.6055579185486, 73.37968873977661)(693.1839690208435, 74.04085940122604)(768.6332130432129, 173.7125574350357)",
            "programs_evaluated": 213
        },
        {
            "number": 3,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x09), 50), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01), 10)]",
            "time": 761.5999732017517,
            "best_reward_over_time": "(0.13942193984985352, 0.7725448608398438)(0.9931108951568604, 0.7818145751953125)(4.63886284828186, 0.9250946044921875)(12.17258596420288, 1.865570068359375)(26.321513891220093, 1.8825607299804688)(31.24737787246704, 2.3942031860351562)(32.04640293121338, 2.9911346435546875)(32.88040590286255, 3.667694091796875)(33.88533592224121, 6.063995361328125)(35.072778940200806, 10.006187438964844)(36.400243043899536, 11.58803939819336)(51.34312987327576, 12.125690460205078)(59.42514705657959, 12.773773193359375)(60.77530097961426, 13.238597869873047)(62.317168951034546, 16.01421356201172)(64.0401999950409, 19.94655990600586)(65.93372583389282, 23.425987243652344)(68.01321196556091, 25.02151107788086)(73.43794798851013, 26.297813415527344)(84.84327292442322, 26.468032836914062)(90.05118894577026, 32.68299102783203)(93.25939989089966, 34.04111099243164)(96.72689700126648, 45.58686637878418)(114.87827897071838, 47.82758903503418)(124.28795289993286, 49.41688346862793)(178.709627866745, 58.99172019958496)(192.76518893241882, 63.44426727294922)(240.5740749835968, 63.557979583740234)(245.5182318687439, 63.780378341674805)(260.59736585617065, 65.57812023162842)(271.6784369945526, 69.48721981048584)(361.4178960323334, 70.81344509124756)(480.0820939540863, 71.3622419834137)(501.1530439853668, 71.65325474739075)(508.2873799800873, 72.26369833946228)(566.4492130279541, 72.36053395271301)(588.1046979427338, 72.92053043842316)(622.0949890613556, 73.34519553184509)(637.5072538852692, 73.3541910648346)(658.2660779953003, 73.37968873977661)(687.6784310340881, 74.04085940122604)(761.5998950004578, 173.7125574350357)",
            "programs_evaluated": 213
        }
    ],
    "world": {
        "seed": 6354,
        "description": "Many trees. Small hill."
    }
}
