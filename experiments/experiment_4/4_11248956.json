{
    "avg_time": 165.2231273651123,
    "experiment": {
        "number": 4,
        "description": "Partial solution: reward > best_reward + 0.2.\nCycle length 8.\nSelect 5 programs with highest reward.\nUpdate based on last action; fit = min(best_reward / 100, 1); replace start symbol with [best_program; ACT].\nAllow taking multiple actions after best program.\nChange (TIMES, action) to (action, TIMES).\nLast direction higher probability, other directions lower uniform probability.",
        "grammar": [
            "4 : SEQ => ACT",
            "4 : ACT => [A]",
            "4 : ACT => [ACT; A]",
            "4 : A => (Dict(\"move\" => DIR, \"sprint\" => 1, \"jump\" => 1), TIMES)",
            "4 : DIR => 1",
            "4 : DIR => 2",
            "4 : DIR => 4",
            "4 : DIR => 8",
            "4 : DIR => 5",
            "4 : DIR => 9",
            "4 : DIR => 6",
            "4 : DIR => 10",
            "4 : TIMES => 5",
            "4 : TIMES => 10",
            "4 : TIMES => 25",
            "4 : TIMES => 50",
            "4 : TIMES => 75",
            "4 : TIMES => 100"
        ]
    },
    "tries": [
        {
            "number": 1,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 25)]",
            "time": 162.9401409626007,
            "best_reward_over_time": "(0.8968751430511475, 0.3605499267578125)(2.064985990524292, 0.6474380493164062)(3.1370930671691895, 1.6182403564453125)(3.498547077178955, 2.90155029296875)(4.079097032546997, 5.735206604003906)(4.871057987213135, 11.136661529541016)(5.887068033218384, 14.990299224853516)(7.219797134399414, 18.64748764038086)(9.85977816581726, 33.172950744628906)(12.340043067932129, 36.773921966552734)(24.481892108917236, 42.45821762084961)(27.423727989196777, 44.2563591003418)(68.69202613830566, 51.09989929199219)(79.58988118171692, 51.553646087646484)(89.0827009677887, 51.9533748626709)(96.59108805656433, 63.662720680236816)(105.45136499404907, 64.5798888206482)(108.95836901664734, 65.9426646232605)(149.79042601585388, 65.94831562042236)(153.9487819671631, 66.18438768386841)(161.46545815467834, 68.41221451759338)",
            "programs_evaluated": 64
        },
        {
            "number": 2,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 25)]",
            "time": 167.65122509002686,
            "best_reward_over_time": "(0.3260819911956787, 0.3605499267578125)(1.2507848739624023, 0.6474380493164062)(2.0880918502807617, 1.6182403564453125)(2.416372060775757, 2.90155029296875)(2.8724160194396973, 5.735206604003906)(3.6144979000091553, 11.136661529541016)(4.542762041091919, 14.990299224853516)(5.738986968994141, 18.64748764038086)(8.134564876556396, 33.172950744628906)(10.47316598892212, 36.773921966552734)(23.041125059127808, 42.45821762084961)(25.99624991416931, 44.2563591003418)(68.51654100418091, 51.09989929199219)(79.52278804779053, 51.553646087646484)(89.22988390922546, 51.9533748626709)(97.07297682762146, 63.662720680236816)(106.20865082740784, 64.5798888206482)(109.98384189605713, 65.9426646232605)(154.63170194625854, 65.94831562042236)(158.82279086112976, 66.18438768386841)(167.65117287635803, 68.41221451759338)",
            "programs_evaluated": 64
        },
        {
            "number": 3,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 25)]",
            "time": 165.07801604270935,
            "best_reward_over_time": "(0.29299402236938477, 0.3605499267578125)(1.210819959640503, 0.6474380493164062)(2.1137518882751465, 1.6182403564453125)(2.450312852859497, 2.90155029296875)(2.9875948429107666, 5.735206604003906)(3.7328438758850098, 11.136661529541016)(4.7294700145721436, 14.990299224853516)(6.001294851303101, 18.64748764038086)(8.439244985580444, 33.172950744628906)(10.646902799606323, 36.773921966552734)(23.075955867767334, 42.45821762084961)(26.120002031326294, 44.2563591003418)(68.46278381347656, 51.09989929199219)(79.59363198280334, 51.553646087646484)(88.7380428314209, 51.9533748626709)(95.73299288749695, 63.662720680236816)(104.13021183013916, 64.5798888206482)(108.17845296859741, 65.9426646232605)(151.98484802246094, 65.94831562042236)(156.16811084747314, 66.18438768386841)(165.07794380187988, 68.41221451759338)",
            "programs_evaluated": 64
        }
    ],
    "world": {
        "seed": 11248956,
        "description": "Big cave forward. Reward increases when entering cave. Goal not in cave."
    }
}
