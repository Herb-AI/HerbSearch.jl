{
    "avg_time": 163.72725001970926,
    "experiment": {
        "number": 4,
        "description": "Partial solution: reward > best_reward.\nCycle length 8.\nSelect 5 programs with highest reward.\nUpdate based on last action; fit = min(best_reward / 100, 1); replace start symbol with [best_program; ACT].\nAllow taking multiple actions after best program.\nChange (TIMES, action) to (action, TIMES).\nLast direction higher probability, other directions lower uniform probability.",
        "grammar": [
            "4 : SEQ => ACT",
            "4 : ACT => [A]",
            "4 : ACT => [ACT; A]",
            "4 : A => (Dict(\"move\" => DIR, \"sprint\" => 1, \"jump\" => 1), TIMES)",
            "4 : DIR => 1",
            "4 : DIR => 2",
            "4 : DIR => 4",
            "4 : DIR => 8",
            "4 : DIR => 5",
            "4 : DIR => 9",
            "4 : DIR => 6",
            "4 : DIR => 10",
            "4 : TIMES => 5",
            "4 : TIMES => 10",
            "4 : TIMES => 25",
            "4 : TIMES => 50",
            "4 : TIMES => 75",
            "4 : TIMES => 100"
        ]
    },
    "tries": [
        {
            "number": 1,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 25)]",
            "time": 162.63100600242615,
            "best_reward_over_time": "(0.9178588390350342, 0.3605499267578125)(2.0092668533325195, 0.6474380493164062)(3.0461158752441406, 1.6182403564453125)(3.43268084526062, 2.90155029296875)(3.9729318618774414, 5.735206604003906)(4.770681858062744, 11.136661529541016)(5.777130842208862, 14.990299224853516)(7.081241846084595, 18.64748764038086)(9.67424988746643, 33.172950744628906)(12.245563983917236, 36.773921966552734)(24.283249855041504, 42.45821762084961)(27.252285957336426, 44.2563591003418)(67.79850602149963, 51.09989929199219)(78.08140397071838, 51.553646087646484)(86.6532289981842, 51.9533748626709)(93.78776001930237, 63.662720680236816)(102.34413981437683, 64.5798888206482)(106.39294981956482, 65.9426646232605)(148.86301398277283, 65.94831562042236)(152.95547604560852, 66.18438768386841)(161.19713687896729, 169.64837539196014)",
            "programs_evaluated": 64
        },
        {
            "number": 2,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 25)]",
            "time": 167.45916199684143,
            "best_reward_over_time": "(0.3178849220275879, 0.3605499267578125)(1.2486679553985596, 0.6474380493164062)(2.164262056350708, 1.6182403564453125)(2.5361361503601074, 2.90155029296875)(3.030372142791748, 5.735206604003906)(3.782473087310791, 11.136661529541016)(4.698647975921631, 14.990299224853516)(5.871078014373779, 18.64748764038086)(8.168264150619507, 33.172950744628906)(10.625254154205322, 36.773921966552734)(23.09890604019165, 42.45821762084961)(26.11190700531006, 44.2563591003418)(68.52838492393494, 51.09989929199219)(79.09985494613647, 51.553646087646484)(88.50875306129456, 51.9533748626709)(96.0014660358429, 63.662720680236816)(105.04516315460205, 64.5798888206482)(109.24393796920776, 65.9426646232605)(154.64502215385437, 65.94831562042236)(158.7997579574585, 66.18438768386841)(167.45907402038574, 169.64837539196014)",
            "programs_evaluated": 64
        },
        {
            "number": 3,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 75), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 25)]",
            "time": 161.09158205986023,
            "best_reward_over_time": "(0.28165698051452637, 0.3605499267578125)(1.1721479892730713, 0.6474380493164062)(1.9809989929199219, 1.6182403564453125)(2.3114969730377197, 2.90155029296875)(2.8367631435394287, 5.735206604003906)(3.5537960529327393, 11.136661529541016)(4.504755973815918, 14.990299224853516)(5.75150203704834, 18.64748764038086)(8.123718023300171, 33.172950744628906)(10.481107950210571, 36.773921966552734)(22.232867002487183, 42.45821762084961)(24.918344020843506, 44.2563591003418)(65.76326394081116, 51.09989929199219)(76.01987504959106, 51.553646087646484)(85.10561108589172, 51.9533748626709)(92.27372407913208, 63.662720680236816)(100.72188305854797, 64.5798888206482)(104.57998704910278, 65.9426646232605)(148.0572531223297, 65.94831562042236)(152.2632451057434, 66.18438768386841)(161.0915081501007, 169.64837539196014)",
            "programs_evaluated": 64
        }
    ],
    "world": {
        "seed": 11248956,
        "description": "Big cave forward. Reward increases when entering cave. Goal not in cave."
    }
}
