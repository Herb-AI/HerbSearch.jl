{
    "avg_time": 161.1679298877716,
    "experiment": {
        "number": 5,
        "description": "Partial solution: reward > best_reward + 0.2.\nCycle length 8.\nSelect 5 programs with highest reward.\nUpdate based on last action; fit = min(best_reward / 100, 1); replace start symbol with [best_program; ACT].\nAllow taking multiple actions after best program.\nChange (TIMES, action) to (action, TIMES).\nLast direction higher probability, other directions lower uniform probability.\nUniform probabilities for TIMES.",
        "grammar": [
            "4 : SEQ => ACT",
            "4 : ACT => [A]",
            "4 : ACT => [ACT; A]",
            "4 : A => (Dict(\"move\" => DIR, \"sprint\" => 1, \"jump\" => 1), TIMES)",
            "4 : DIR => 1",
            "4 : DIR => 2",
            "4 : DIR => 4",
            "4 : DIR => 8",
            "4 : DIR => 5",
            "4 : DIR => 9",
            "4 : DIR => 6",
            "4 : DIR => 10",
            "4 : TIMES => 5",
            "4 : TIMES => 10",
            "4 : TIMES => 25",
            "4 : TIMES => 50",
            "4 : TIMES => 75",
            "4 : TIMES => 100"
        ]
    },
    "tries": [
        {
            "number": 1,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 5)]",
            "time": 157.4925298690796,
            "best_reward_over_time": "(0.8873250484466553, 0.7175369262695312)(1.92454195022583, 0.8260650634765625)(2.8538029193878174, 1.994171142578125)(3.185072898864746, 3.5540847778320312)(3.703861951828003, 8.325111389160156)(4.407037019729614, 15.982097625732422)(5.329041004180908, 21.263580322265625)(6.58933687210083, 29.337635040283203)(8.309027910232544, 31.192649841308594)(9.80131196975708, 32.659423828125)(11.176421880722046, 37.707401275634766)(12.621734857559204, 46.042415618896484)(14.391554832458496, 54.10545539855957)(16.370579957962036, 61.9716911315918)(20.54891300201416, 63.658912658691406)(22.57348895072937, 65.25379371643066)(24.75969386100769, 68.3229546546936)(39.512430906295776, 69.22955894470215)(41.92493391036987, 69.81437969207764)(92.44370603561401, 69.89490556716919)(96.81274199485779, 70.0362343788147)(98.83962297439575, 70.7058653831482)(101.13044095039368, 72.20734119415283)(151.07409501075745, 72.97081422805786)(156.05457592010498, 73.11044192314148)",
            "programs_evaluated": 81
        },
        {
            "number": 2,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 5)]",
            "time": 163.83314394950867,
            "best_reward_over_time": "(0.29348301887512207, 0.7175369262695312)(1.1064701080322266, 0.8260650634765625)(1.8459711074829102, 1.994171142578125)(2.142961025238037, 3.5540847778320312)(2.610328197479248, 8.325111389160156)(3.3126142024993896, 15.982097625732422)(4.229154109954834, 21.263580322265625)(5.294044017791748, 29.337635040283203)(6.817370176315308, 31.192649841308594)(8.14342212677002, 32.659423828125)(9.472687005996704, 37.707401275634766)(11.092283964157104, 46.042415618896484)(13.005606174468994, 54.10545539855957)(15.08406400680542, 61.9716911315918)(19.73467206954956, 63.658912658691406)(22.007848024368286, 65.25379371643066)(24.47073197364807, 68.3229546546936)(38.720508098602295, 69.22955894470215)(41.1398401260376, 69.81437969207764)(94.81444907188416, 69.89490556716919)(99.65966415405273, 70.0362343788147)(102.07637810707092, 70.7058653831482)(104.29489016532898, 72.20734119415283)(158.46728110313416, 72.97081422805786)(163.83306908607483, 73.11044192314148)",
            "programs_evaluated": 81
        },
        {
            "number": 3,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 5)]",
            "time": 162.17811584472656,
            "best_reward_over_time": "(0.2741739749908447, 0.7175369262695312)(1.0162529945373535, 0.8260650634765625)(1.77433180809021, 1.994171142578125)(2.0690948963165283, 3.5540847778320312)(2.5013937950134277, 8.325111389160156)(3.162484884262085, 15.982097625732422)(4.029399871826172, 21.263580322265625)(5.241174936294556, 29.337635040283203)(6.909594774246216, 31.192649841308594)(8.366130828857422, 32.659423828125)(9.75567078590393, 37.707401275634766)(11.303597927093506, 46.042415618896484)(13.142711877822876, 54.10545539855957)(15.21638298034668, 61.9716911315918)(19.51816201210022, 63.658912658691406)(21.494999885559082, 65.25379371643066)(23.73529887199402, 68.3229546546936)(38.87418985366821, 69.22955894470215)(41.34097385406494, 69.81437969207764)(95.08717489242554, 69.89490556716919)(99.93709087371826, 70.0362343788147)(102.18650984764099, 70.7058653831482)(104.4006519317627, 72.20734119415283)(157.10936284065247, 72.97081422805786)(162.17804479599, 73.11044192314148)",
            "programs_evaluated": 81
        }
    ],
    "world": {
        "seed": 958129,
        "description": "Relatively flat. Some trees. Cave opening."
    }
}
