{
    "standard_deviation": 1.948616667684382,
    "avg_time": 171.96820227305093,
    "experiment": {
        "number": 5,
        "description": "Partial solution: reward > best_reward.\nCycle length 8.\nSelect 5 programs with highest reward.\nUpdate based on last action; fit = min(best_reward / 100, 1); replace start symbol with [best_program; ACT].\nAllow taking multiple actions after best program.\nChange (TIMES, action) to (action, TIMES).\nLast direction higher probability, other directions lower uniform probability.\nUniform probabilities for TIMES.",
        "grammar": [
            "SEQ => ACT",
            "ACT => [A]",
            "ACT => [ACT; A]",
            "A => (Dict(\"move\" => DIR, \"sprint\" => 1, \"jump\" => 1), TIMES)",
            "DIR => 1",
            "DIR => 2",
            "DIR => 4",
            "DIR => 8",
            "DIR => 5",
            "DIR => 9",
            "DIR => 6",
            "DIR => 10",
            "TIMES => 5",
            "TIMES => 10",
            "TIMES => 25",
            "TIMES => 50",
            "TIMES => 75",
            "TIMES => 100"
        ]
    },
    "tries": [
        {
            "number": 1,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 5)]",
            "time": 169.82101893424988,
            "best_reward_over_time": "(0.8732869625091553, 0.7175369262695312)(1.9523141384124756, 0.8260650634765625)(2.8841891288757324, 1.994171142578125)(3.1984081268310547, 3.5540847778320312)(3.687577962875366, 8.325111389160156)(4.383311986923218, 15.982097625732422)(5.37270712852478, 21.263580322265625)(6.651921987533569, 29.337635040283203)(8.432636976242065, 31.192649841308594)(10.083334922790527, 32.659423828125)(11.494156122207642, 37.707401275634766)(13.05122995376587, 46.042415618896484)(14.952314138412476, 54.10545539855957)(17.18137812614441, 61.9716911315918)(21.944638967514038, 63.658912658691406)(24.266418933868408, 65.25379371643066)(26.816041946411133, 68.3229546546936)(42.34476399421692, 69.22955894470215)(44.92231893539429, 69.81437969207764)(98.84077501296997, 69.89490556716919)(103.64536595344543, 70.0362343788147)(106.15336012840271, 70.7058653831482)(108.68440103530884, 72.20734119415283)(162.95916199684143, 72.97081422805786)(168.38980913162231, 174.29829967021942)",
            "programs_evaluated": 81
        },
        {
            "number": 2,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 5)]",
            "time": 172.45929098129272,
            "best_reward_over_time": "(0.31006598472595215, 0.7175369262695312)(1.1630361080169678, 0.8260650634765625)(1.900468111038208, 1.994171142578125)(2.181739091873169, 3.5540847778320312)(2.6686530113220215, 8.325111389160156)(3.4054529666900635, 15.982097625732422)(4.298511028289795, 21.263580322265625)(5.56581711769104, 29.337635040283203)(7.357146978378296, 31.192649841308594)(8.917391061782837, 32.659423828125)(10.423541069030762, 37.707401275634766)(12.124410152435303, 46.042415618896484)(14.164458990097046, 54.10545539855957)(16.425861120224, 61.9716911315918)(21.230042934417725, 63.658912658691406)(23.476995944976807, 65.25379371643066)(25.992675065994263, 68.3229546546936)(42.01394200325012, 69.22955894470215)(44.47229814529419, 69.81437969207764)(100.35849213600159, 69.89490556716919)(105.36510014533997, 70.0362343788147)(107.93125414848328, 70.7058653831482)(110.45421814918518, 72.20734119415283)(166.837975025177, 72.97081422805786)(172.4592261314392, 174.29829967021942)",
            "programs_evaluated": 81
        },
        {
            "number": 3,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 5)]",
            "time": 173.62429690361023,
            "best_reward_over_time": "(0.26754307746887207, 0.7175369262695312)(1.1550490856170654, 0.8260650634765625)(1.9378960132598877, 1.994171142578125)(2.244697093963623, 3.5540847778320312)(2.7153589725494385, 8.325111389160156)(3.4339489936828613, 15.982097625732422)(4.391968011856079, 21.263580322265625)(5.663763999938965, 29.337635040283203)(7.4692840576171875, 31.192649841308594)(8.971997022628784, 32.659423828125)(10.30168604850769, 37.707401275634766)(11.857262134552002, 46.042415618896484)(13.80497407913208, 54.10545539855957)(16.06087017059326, 61.9716911315918)(20.911082983016968, 63.658912658691406)(23.308626174926758, 65.25379371643066)(25.827742099761963, 68.3229546546936)(41.87984013557434, 69.22955894470215)(44.219398021698, 69.81437969207764)(100.66492414474487, 69.89490556716919)(105.80784797668457, 70.0362343788147)(108.38796305656433, 70.7058653831482)(110.965656042099, 72.20734119415283)(168.33050918579102, 72.97081422805786)(173.62420010566711, 174.29829967021942)",
            "programs_evaluated": 81
        }
    ],
    "world": {
        "seed": 958129,
        "description": "Relatively flat. Some trees. Cave opening."
    }
}
