{
    "standard_deviation": 3.6221103138216524,
    "avg_time": 166.0803362528483,
    "experiment": {
        "number": 5,
        "description": "Partial solution: reward > best_reward.\nCycle length 8.\nSelect 5 programs with highest reward.\nUpdate based on last action; fit = min(best_reward / 100, 1); replace start symbol with [best_program; ACT].\nAllow taking multiple actions after best program.\nChange (TIMES, action) to (action, TIMES).\nLast direction higher probability, other directions lower uniform probability.\nUniform probabilities for TIMES.",
        "grammar": [
            "SEQ => ACT",
            "ACT => [A]",
            "ACT => [ACT; A]",
            "A => (Dict(\"move\" => DIR, \"sprint\" => 1, \"jump\" => 1), TIMES)",
            "DIR => 1",
            "DIR => 2",
            "DIR => 4",
            "DIR => 8",
            "DIR => 5",
            "DIR => 9",
            "DIR => 6",
            "DIR => 10",
            "TIMES => 5",
            "TIMES => 10",
            "TIMES => 25",
            "TIMES => 50",
            "TIMES => 75",
            "TIMES => 100"
        ]
    },
    "tries": [
        {
            "number": 1,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 5)]",
            "time": 167.03600883483887,
            "best_reward_over_time": "(0.867030143737793, 0.7175369262695312)(1.8665499687194824, 0.8260650634765625)(2.856717109680176, 1.994171142578125)(3.189319133758545, 3.5540847778320312)(3.672351121902466, 8.325111389160156)(4.405112981796265, 15.982097625732422)(5.349327087402344, 21.263580322265625)(6.5138349533081055, 29.337635040283203)(8.235460996627808, 31.192649841308594)(9.751558065414429, 32.659423828125)(11.147066116333008, 37.707401275634766)(12.778489112854004, 46.042415618896484)(14.588576078414917, 54.10545539855957)(16.711445093154907, 61.9716911315918)(21.469604015350342, 63.658912658691406)(23.75693702697754, 65.25379371643066)(26.2329740524292, 68.3229546546936)(41.359983921051025, 69.22955894470215)(43.68036699295044, 69.81437969207764)(97.34164714813232, 69.89490556716919)(102.02453398704529, 70.0362343788147)(104.38743209838867, 70.7058653831482)(106.74253106117249, 72.20734119415283)(160.5290539264679, 72.97081422805786)(165.62648606300354, 174.29829967021942)",
            "programs_evaluated": 81
        },
        {
            "number": 2,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 5)]",
            "time": 169.12878704071045,
            "best_reward_over_time": "(0.311826229095459, 0.7175369262695312)(1.149153232574463, 0.8260650634765625)(1.9304940700531006, 1.994171142578125)(2.238830089569092, 3.5540847778320312)(2.730609178543091, 8.325111389160156)(3.4602482318878174, 15.982097625732422)(4.415472030639648, 21.263580322265625)(5.681810140609741, 29.337635040283203)(7.427379131317139, 31.192649841308594)(8.966227054595947, 32.659423828125)(10.41467022895813, 37.707401275634766)(12.066564083099365, 46.042415618896484)(13.9896981716156, 54.10545539855957)(16.20303702354431, 61.9716911315918)(20.95943307876587, 63.658912658691406)(23.29171109199524, 65.25379371643066)(25.75471806526184, 68.3229546546936)(41.344043016433716, 69.22955894470215)(43.949915170669556, 69.81437969207764)(99.24976801872253, 69.89490556716919)(104.08234000205994, 70.0362343788147)(106.53501105308533, 70.7058653831482)(109.17372107505798, 72.20734119415283)(163.62311720848083, 72.97081422805786)(169.12871718406677, 174.29829967021942)",
            "programs_evaluated": 81
        },
        {
            "number": 3,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 5)]",
            "time": 162.0762128829956,
            "best_reward_over_time": "(0.274799108505249, 0.7175369262695312)(1.0932140350341797, 0.8260650634765625)(1.7952051162719727, 1.994171142578125)(2.10477614402771, 3.5540847778320312)(2.5774729251861572, 8.325111389160156)(3.291861057281494, 15.982097625732422)(4.212706089019775, 21.263580322265625)(5.471751928329468, 29.337635040283203)(7.1816511154174805, 31.192649841308594)(8.656566143035889, 32.659423828125)(10.043277025222778, 37.707401275634766)(11.658513069152832, 46.042415618896484)(13.391611099243164, 54.10545539855957)(15.366721153259277, 61.9716911315918)(19.612189054489136, 63.658912658691406)(21.66585111618042, 65.25379371643066)(23.861334085464478, 68.3229546546936)(38.749741077423096, 69.22955894470215)(41.02267909049988, 69.81437969207764)(94.46526503562927, 69.89490556716919)(98.98509907722473, 70.0362343788147)(101.43846201896667, 70.7058653831482)(103.8829619884491, 72.20734119415283)(156.92673993110657, 72.97081422805786)(162.0761160850525, 174.29829967021942)",
            "programs_evaluated": 81
        }
    ],
    "world": {
        "seed": 958129,
        "description": "Relatively flat. Some trees. Cave opening."
    }
}
