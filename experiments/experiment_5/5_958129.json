{
    "standard_deviation": 2.0208466863946346,
    "avg_time": 158.11233202616373,
    "experiment": {
        "number": 5,
        "description": "Partial solution: reward > best_reward.\nCycle length 8.\nSelect 5 programs with highest reward.\nUpdate based on last action; fit = min(best_reward / 100, 1); replace start symbol with [best_program; ACT].\nAllow taking multiple actions after best program.\nChange (TIMES, action) to (action, TIMES).\nLast direction higher probability, other directions lower uniform probability.\nUniform probabilities for TIMES.",
        "grammar": [
            "4 : SEQ => ACT",
            "4 : ACT => [A]",
            "4 : ACT => [ACT; A]",
            "4 : A => (Dict(\"move\" => DIR, \"sprint\" => 1, \"jump\" => 1), TIMES)",
            "4 : DIR => 1",
            "4 : DIR => 2",
            "4 : DIR => 4",
            "4 : DIR => 8",
            "4 : DIR => 5",
            "4 : DIR => 9",
            "4 : DIR => 6",
            "4 : DIR => 10",
            "4 : TIMES => 5",
            "4 : TIMES => 10",
            "4 : TIMES => 25",
            "4 : TIMES => 50",
            "4 : TIMES => 75",
            "4 : TIMES => 100"
        ]
    },
    "tries": [
        {
            "number": 1,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 5)]",
            "time": 158.2143750190735,
            "best_reward_over_time": "(0.8756330013275146, 0.7175369262695312)(1.8852570056915283, 0.8260650634765625)(2.7186248302459717, 1.994171142578125)(3.043078899383545, 3.5540847778320312)(3.5254268646240234, 8.325111389160156)(4.278043985366821, 15.982097625732422)(5.193125009536743, 21.263580322265625)(6.362351894378662, 29.337635040283203)(8.02251386642456, 31.192649841308594)(9.57925796508789, 32.659423828125)(10.924523830413818, 37.707401275634766)(12.494804859161377, 46.042415618896484)(14.356888055801392, 54.10545539855957)(16.471837043762207, 61.9716911315918)(20.923465967178345, 63.658912658691406)(23.174510955810547, 65.25379371643066)(25.501786947250366, 68.3229546546936)(39.97177290916443, 69.22955894470215)(42.28997588157654, 69.81437969207764)(91.27901101112366, 69.89490556716919)(95.69388604164124, 70.0362343788147)(97.77912282943726, 70.7058653831482)(100.1014928817749, 72.20734119415283)(151.61354088783264, 72.97081422805786)(156.7554829120636, 174.29829967021942)",
            "programs_evaluated": 81
        },
        {
            "number": 2,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 5)]",
            "time": 160.0802240371704,
            "best_reward_over_time": "(0.29000210762023926, 0.7175369262695312)(1.0835249423980713, 0.8260650634765625)(1.7874290943145752, 1.994171142578125)(2.087886095046997, 3.5540847778320312)(2.543199062347412, 8.325111389160156)(3.199510097503662, 15.982097625732422)(3.9931719303131104, 21.263580322265625)(5.121134996414185, 29.337635040283203)(6.690676927566528, 31.192649841308594)(8.089618921279907, 32.659423828125)(9.421157121658325, 37.707401275634766)(10.97814393043518, 46.042415618896484)(12.84290099143982, 54.10545539855957)(14.909898042678833, 61.9716911315918)(19.44937300682068, 63.658912658691406)(21.566417932510376, 65.25379371643066)(23.790839910507202, 68.3229546546936)(38.701218128204346, 69.22955894470215)(41.095268964767456, 69.81437969207764)(93.27271509170532, 69.89490556716919)(97.63656806945801, 70.0362343788147)(99.83454298973083, 70.7058653831482)(102.20572304725647, 72.20734119415283)(155.153657913208, 72.97081422805786)(160.08016991615295, 174.29829967021942)",
            "programs_evaluated": 81
        },
        {
            "number": 3,
            "program": "Tuple{Dict{String, Integer}, Int64}[(Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 5), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 100), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02), 25), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 10), (Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x04), 5)]",
            "time": 156.04239702224731,
            "best_reward_over_time": "(0.24950599670410156, 0.7175369262695312)(0.992988109588623, 0.8260650634765625)(1.7108640670776367, 1.994171142578125)(1.99753999710083, 3.5540847778320312)(2.4453530311584473, 8.325111389160156)(3.1112730503082275, 15.982097625732422)(3.977363109588623, 21.263580322265625)(5.1623289585113525, 29.337635040283203)(6.785301923751831, 31.192649841308594)(8.19806694984436, 32.659423828125)(9.515980005264282, 37.707401275634766)(10.949362993240356, 46.042415618896484)(12.69552493095398, 54.10545539855957)(14.637087106704712, 61.9716911315918)(19.07090711593628, 63.658912658691406)(21.23452115058899, 65.25379371643066)(23.43510103225708, 68.3229546546936)(37.71139597892761, 69.22955894470215)(39.89784502983093, 69.81437969207764)(91.34435510635376, 69.89490556716919)(96.03503608703613, 70.0362343788147)(98.42923402786255, 70.7058653831482)(100.76708006858826, 72.20734119415283)(151.27277898788452, 72.97081422805786)(156.04234194755554, 174.29829967021942)",
            "programs_evaluated": 81
        }
    ],
    "world": {
        "seed": 958129,
        "description": "Relatively flat. Some trees. Cave opening."
    }
}
