{
    "avg_time": 151.1522936820984,
    "experiment": {
        "number": 2,
        "description": "Partial solution: reward > best_reward + 0.2.\nCycle length 6.\nSelect 5 programs with highest reward.\nUpdate based on last action; fit = min(best_reward / 100, 1); replace start symbol with [best_program; ACTS].\nAllow taking multiple actions after best program.",
        "grammar": [
            "4 : SEQ => ACT",
            "4 : ACT => [A]",
            "4 : ACT => [ACT; A]",
            "4 : A => (TIMES, Dict(\"move\" => DIR, \"sprint\" => 1, \"jump\" => 1))",
            "4 : DIR => 1",
            "4 : DIR => 2",
            "4 : DIR => 4",
            "4 : DIR => 8",
            "4 : DIR => 5",
            "4 : DIR => 9",
            "4 : DIR => 6",
            "4 : DIR => 10",
            "4 : TIMES => 5",
            "4 : TIMES => 10",
            "4 : TIMES => 25",
            "4 : TIMES => 50",
            "4 : TIMES => 75",
            "4 : TIMES => 100"
        ]
    },
    "tries": [
        {
            "number": 1,
            "program": "Tuple{Int64, Dict{String, Integer}}[(100, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01)), (100, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x09)), (100, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x08)), (75, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02)), (75, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05))]",
            "time": 148.76611399650574,
            "best_reward_over_time": "(0.8545448780059814, 0.72052001953125)(1.1784160137176514, 1.7621688842773438)(1.6691269874572754, 5.826240539550781)(2.3166558742523193, 12.413169860839844)(3.1481590270996094, 18.50699234008789)(4.13373589515686, 23.59320831298828)(5.897806882858276, 27.472999572753906)(11.434634923934937, 39.209415435791016)(15.005676984786987, 45.76560592651367)(20.154464960098267, 56.153629302978516)(95.22080087661743, 58.902060985565186)(147.32848501205444, 163.33255100250244)",
            "programs_evaluated": 59
        },
        {
            "number": 2,
            "program": "Tuple{Int64, Dict{String, Integer}}[(100, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01)), (100, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x09)), (100, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x08)), (75, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02)), (75, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05))]",
            "time": 152.89074611663818,
            "best_reward_over_time": "(0.24270009994506836, 0.72052001953125)(0.4492940902709961, 1.7621688842773438)(0.8386571407318115, 5.826240539550781)(1.419011116027832, 12.413169860839844)(2.1981260776519775, 18.50699234008789)(3.122607946395874, 23.59320831298828)(4.7913830280303955, 27.472999572753906)(9.88479995727539, 39.209415435791016)(13.377190113067627, 45.76560592651367)(18.498167991638184, 56.153629302978516)(96.24047112464905, 58.902060985565186)(152.89065194129944, 163.33255100250244)",
            "programs_evaluated": 59
        },
        {
            "number": 3,
            "program": "Tuple{Int64, Dict{String, Integer}}[(100, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01)), (100, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x09)), (100, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x08)), (75, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02)), (75, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05))]",
            "time": 151.80002093315125,
            "best_reward_over_time": "(0.21114492416381836, 0.72052001953125)(0.4079728126525879, 1.7621688842773438)(0.7429699897766113, 5.826240539550781)(1.2973148822784424, 12.413169860839844)(2.0135657787323, 18.50699234008789)(2.9524388313293457, 23.59320831298828)(4.533259868621826, 27.472999572753906)(9.05576491355896, 39.209415435791016)(12.411298990249634, 45.76560592651367)(17.123427867889404, 56.153629302978516)(95.52977585792542, 58.902060985565186)(151.79995584487915, 163.33255100250244)",
            "programs_evaluated": 59
        }
    ],
    "world": {
        "seed": 999999,
        "description": "Desert. No obstacles."
    }
}
