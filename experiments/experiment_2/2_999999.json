{
    "avg_time": 149.10382095972696,
    "experiment": {
        "number": 2,
        "description": "Partial solution: reward > best_reward.\nCycle length 6.\nSelect 5 programs with highest reward.\nUpdate based on last action; fit = min(best_reward / 100, 1); replace start symbol with [best_program; ACT].\nAllow taking multiple actions after best program.",
        "grammar": [
            "4 : SEQ => ACT",
            "4 : ACT => [A]",
            "4 : ACT => [ACT; A]",
            "4 : A => (TIMES, Dict(\"move\" => DIR, \"sprint\" => 1, \"jump\" => 1))",
            "4 : DIR => 1",
            "4 : DIR => 2",
            "4 : DIR => 4",
            "4 : DIR => 8",
            "4 : DIR => 5",
            "4 : DIR => 9",
            "4 : DIR => 6",
            "4 : DIR => 10",
            "4 : TIMES => 5",
            "4 : TIMES => 10",
            "4 : TIMES => 25",
            "4 : TIMES => 50",
            "4 : TIMES => 75",
            "4 : TIMES => 100"
        ]
    },
    "tries": [
        {
            "number": 1,
            "program": "Tuple{Int64, Dict{String, Integer}}[(100, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01)), (100, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x09)), (100, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x08)), (75, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02)), (75, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05))]",
            "time": 148.79836988449097,
            "best_reward_over_time": "(0.8679611682891846, 0.72052001953125)(1.1849300861358643, 1.7621688842773438)(1.6629951000213623, 5.826240539550781)(2.3202810287475586, 12.413169860839844)(3.1813831329345703, 18.50699234008789)(4.2158191204071045, 23.59320831298828)(6.048677206039429, 27.472999572753906)(10.99514102935791, 39.209415435791016)(14.443248987197876, 45.76560592651367)(19.660397052764893, 56.153629302978516)(93.3942551612854, 58.902060985565186)(147.3701741695404, 163.33255100250244)",
            "programs_evaluated": 59
        },
        {
            "number": 2,
            "program": "Tuple{Int64, Dict{String, Integer}}[(100, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01)), (100, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x09)), (100, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x08)), (75, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02)), (75, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05))]",
            "time": 148.03531289100647,
            "best_reward_over_time": "(0.26381397247314453, 0.72052001953125)(0.47914886474609375, 1.7621688842773438)(0.8612198829650879, 5.826240539550781)(1.4128148555755615, 12.413169860839844)(2.1880059242248535, 18.50699234008789)(3.1373238563537598, 23.59320831298828)(4.857492923736572, 27.472999572753906)(9.745418787002563, 39.209415435791016)(13.149728775024414, 45.76560592651367)(18.068883895874023, 56.153629302978516)(92.52972984313965, 58.902060985565186)(148.0352499485016, 163.33255100250244)",
            "programs_evaluated": 59
        },
        {
            "number": 3,
            "program": "Tuple{Int64, Dict{String, Integer}}[(100, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01)), (100, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x09)), (100, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x08)), (75, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02)), (75, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05))]",
            "time": 150.47778010368347,
            "best_reward_over_time": "(0.19211506843566895, 0.72052001953125)(0.3854830265045166, 1.7621688842773438)(0.7606430053710938, 5.826240539550781)(1.3586039543151855, 12.413169860839844)(2.12321400642395, 18.50699234008789)(3.0569190979003906, 23.59320831298828)(4.7199249267578125, 27.472999572753906)(9.74776005744934, 39.209415435791016)(13.210541009902954, 45.76560592651367)(18.1005539894104, 56.153629302978516)(94.34049391746521, 58.902060985565186)(150.47772407531738, 163.33255100250244)",
            "programs_evaluated": 59
        }
    ],
    "world": {
        "seed": 999999,
        "description": "Desert. No obstacles."
    }
}
