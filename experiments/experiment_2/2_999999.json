{
    "avg_time": 154.4657282034556,
    "experiment": {
        "number": 2,
        "description": "Partial solution: reward > best_reward + 0.2.\nCycle length 6.\nSelect 5 programs with highest reward.\nUpdate based on last action; fit = min(best_reward / 100, 1); replace start symbol with [best_program; ACTS].\nAllow taking multiple actions after best program.",
        "grammar": [
            "4 : SEQ => ACT",
            "4 : ACT => [A]",
            "4 : ACT => [ACT; A]",
            "4 : A => (TIMES, Dict(\"move\" => DIR, \"sprint\" => 1, \"jump\" => 1))",
            "4 : DIR => 1",
            "4 : DIR => 2",
            "4 : DIR => 4",
            "4 : DIR => 8",
            "4 : DIR => 5",
            "4 : DIR => 9",
            "4 : DIR => 6",
            "4 : DIR => 10",
            "4 : TIMES => 5",
            "4 : TIMES => 10",
            "4 : TIMES => 25",
            "4 : TIMES => 50",
            "4 : TIMES => 75",
            "4 : TIMES => 100"
        ]
    },
    "tries": [
        {
            "number": 1,
            "program": "Tuple{Int64, Dict{String, Integer}}[(100, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01)), (100, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x09)), (100, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x08)), (75, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02)), (75, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05))]",
            "time": 155.98052883148193,
            "best_reward_over_time": "(0.8194899559020996, 0.72052001953125)(1.1430890560150146, 1.7621688842773438)(1.6344749927520752, 5.826240539550781)(2.3452939987182617, 12.413169860839844)(3.2346479892730713, 18.50699234008789)(4.289252042770386, 23.59320831298828)(6.236521005630493, 27.472999572753906)(11.76789903640747, 39.209415435791016)(15.268365859985352, 45.76560592651367)(20.421638011932373, 56.153629302978516)(98.69865798950195, 58.902060985565186)(154.53547191619873, 163.33255100250244)",
            "programs_evaluated": 59
        },
        {
            "number": 2,
            "program": "Tuple{Int64, Dict{String, Integer}}[(100, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01)), (100, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x09)), (100, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x08)), (75, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02)), (75, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05))]",
            "time": 153.28095698356628,
            "best_reward_over_time": "(0.23995304107666016, 0.72052001953125)(0.4197509288787842, 1.7621688842773438)(0.7748799324035645, 5.826240539550781)(1.3199028968811035, 12.413169860839844)(2.0453999042510986, 18.50699234008789)(2.962280035018921, 23.59320831298828)(4.634443998336792, 27.472999572753906)(9.712147951126099, 39.209415435791016)(13.179156064987183, 45.76560592651367)(17.97332501411438, 56.153629302978516)(95.25620889663696, 58.902060985565186)(153.28088903427124, 163.33255100250244)",
            "programs_evaluated": 59
        },
        {
            "number": 3,
            "program": "Tuple{Int64, Dict{String, Integer}}[(100, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x01)), (100, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x09)), (100, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x08)), (75, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x02)), (75, Dict(\"sprint\" => 1, \"jump\" => 1, \"move\" => 0x05))]",
            "time": 154.1356987953186,
            "best_reward_over_time": "(0.24004793167114258, 0.72052001953125)(0.4374539852142334, 1.7621688842773438)(0.8277080059051514, 5.826240539550781)(1.3887569904327393, 12.413169860839844)(2.1554319858551025, 18.50699234008789)(3.0737738609313965, 23.59320831298828)(4.816574811935425, 27.472999572753906)(9.925882816314697, 39.209415435791016)(13.37918496131897, 45.76560592651367)(18.257895946502686, 56.153629302978516)(95.7578649520874, 58.902060985565186)(154.1356348991394, 163.33255100250244)",
            "programs_evaluated": 59
        }
    ],
    "world": {
        "seed": 999999,
        "description": "Desert. No obstacles."
    }
}
